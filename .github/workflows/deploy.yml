name: Deploy Node.js Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  aws-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: node-app/package-lock.json
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd node-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Create AWS Credentials Script
      run: |
        cat << EOF > aws_creds.sh
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_REGION=${{ secrets.AWS_REGION }}
        EOF

    - name: Setup SSH Key
      run: |
         echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
         chmod 600 key.pem

    - name: Copy AWS creds to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i key.pem aws_creds.sh ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/aws_creds.sh

    - name: SSH and deploy Docker container from ECR
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          source ~/aws_creds.sh

          echo "Verifying credentials..."
          aws sts get-caller-identity || { echo "Invalid AWS credentials"; exit 1; }

          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

          if docker ps -a --format '{{.Names}}' | grep -w node-app-aws > /dev/null 2>&1; then
            docker stop node-app-aws || true
            docker rm node-app-aws || true
          else
            echo "Container node-app-aws does not exist. Skipping stop/remove."
          fi

          docker run -d --name node-app-aws -p 80:5000 --restart always ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

        ENDSSH

    # - name: Deploy to AWS EC2
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ubuntu
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       # Login to ECR
    #       aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
    #       # Pull the new image
    #       docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          
    #       # Stop and remove the old container if it exists
    #       docker stop node-app-aws || true
    #       docker rm node-app-aws || true
          
    #       # Run the new container
    #       docker run -d \
    #         --name node-app-aws \
    #         -p 5000:5000 \
    #         --restart always \
    #         ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

  ibm-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: node-app/package-lock.json

    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud plugin install container-registry
        
    - name: Login to IBM Cloud
      env:
        IBM_API_KEY: ${{ secrets.IBM_API_KEY }}
        IBM_REGION: ${{ secrets.IBM_REGION }}
      run: |
        ibmcloud login --apikey "$IBM_API_KEY" -r "${{ secrets.IBM_REGION }}"
        ibmcloud target -g terraform
        ibmcloud cr login
        ibmcloud cr region-set global
        
    - name: Build and push Docker image to IBM Container Registry
      env:
        ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
        ICR_REPOSITORY: ${{ secrets.ICR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
        IBM_REGION: ${{ secrets.IBM_REGION }}
      run: |
        cd node-app
        docker build -t icr.io/$ICR_NAMESPACE/$ICR_REPOSITORY:$IMAGE_TAG .
        docker push icr.io/$ICR_NAMESPACE/$ICR_REPOSITORY:$IMAGE_TAG
        
    - name: Deploy to IBM Cloud Instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.IBM_INSTANCE_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Login to IBM Container Registry
          ibmcloud login --apikey "${{ secrets.IBM_API_KEY }}" -r "${{ secrets.IBM_REGION }}"
          ibmcloud cr login
          
          # Pull the new image
          docker pull icr.io/${{ secrets.ICR_NAMESPACE }}/${{ secrets.ICR_REPOSITORY_NAME }}:${{ github.sha }}
          
          # Stop and remove the old container if it exists
          docker stop node-app-ibm || true
          docker rm node-app-ibm || true
          
          # Run the new container
          docker run -d \
            --name node-app-ibm \
            -p 5000:5000 \
            --restart always \
            us.icr.io/${{ secrets.ICR_NAMESPACE }}/${{ secrets.ICR_REPOSITORY_NAME }}:${{ github.sha }}